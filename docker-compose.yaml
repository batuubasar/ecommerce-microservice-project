services:
  libs:
    build:
      context: ./libs
      dockerfile: Dockerfile
    volumes:
      - libs-dist:/usr/src/app/dist
      - libs-modules:/usr/src/app/node_modules
    healthcheck:
      test: ["CMD", "stat", "/usr/src/app/dist"]
      interval: 5s
      timeout: 3s
      retries: 3
  users-microservice:
    build:
      context: .
      dockerfile: ./users-microservice/Dockerfile
    networks:
      - ecommerce-app-microservice-network
    depends_on:
      users-pg-db:
        condition: service_healthy
      libs:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3020"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./users-microservice:/usr/src/app/users-microservice
      - /usr/src/app/users-microservice/node_modules
      - libs-dist:/usr/src/app/libs/dist
      - libs-modules:/usr/src/app/libs/node_modules
    restart: unless-stopped
  products-microservice:
    build:
      context: .
      dockerfile: ./products-microservice/Dockerfile
    networks:
      - ecommerce-app-microservice-network
    depends_on:
      products-pg-db:
        condition: service_healthy
      libs:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3022"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - ./products-microservice/.env
    volumes:
      - ./products-microservice:/usr/src/app/products-microservice
      - /usr/src/app/products-microservice/node_modules
      - libs-dist:/usr/src/app/libs/dist
      - libs-modules:/usr/src/app/libs/node_modules
    restart: unless-stopped
  
  orders-microservice:
    build:
      context: .
      dockerfile: ./orders-microservice/Dockerfile
    networks:
      - ecommerce-app-microservice-network
    depends_on:
      orders-pg-db:
        condition: service_healthy
      libs:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3023"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - ./orders-microservice/.env
    volumes:
      - ./orders-microservice:/usr/src/app/orders-microservice
      - /usr/src/app/orders-microservice/node_modules
      - libs-dist:/usr/src/app/libs/dist
      - libs-modules:/usr/src/app/libs/node_modules
    restart: unless-stopped
    
  cart-microservice:
    build:
      context: .
      dockerfile: ./cart-microservice/Dockerfile
    networks:
      - ecommerce-app-microservice-network
    env_file:
      - ./cart-microservice/.env
    depends_on:
      cart-mongo:
        condition: service_healthy
      libs:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3024"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./cart-microservice:/usr/src/app/cart-microservice
      - /usr/src/app/cart-microservice/node_modules
      - libs-dist:/usr/src/app/libs/dist
      - libs-modules:/usr/src/app/libs/node_modules
    restart: unless-stopped

  auth-microservice:
    build:
      context: .
      dockerfile: ./auth-microservice/Dockerfile
    networks:
      - ecommerce-app-microservice-network
    depends_on:
      users-microservice:
        condition: service_healthy
      products-microservice:
        condition: service_healthy
      orders-microservice:
        condition: service_healthy
      cart-microservice:
        condition: service_healthy
      libs:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3021"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./auth-microservice:/usr/src/app/auth-microservice
      - /usr/src/app/auth-microservice/node_modules
      - libs-dist:/usr/src/app/libs/dist
      - libs-modules:/usr/src/app/libs/node_modules
    restart: unless-stopped
  
  users-pg-db:
    image: postgres:16
    container_name: nest-user-pg-db
    restart: always
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: ${USERS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${USERS_POSTGRES_PASSWORD}
      POSTGRES_DB: ${USERS_POSTGRES_DB}
    volumes:
      - users-pg-data:/var/lib/postgresql/data
    networks:
      - ecommerce-app-microservice-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  products-pg-db:
    image: postgres:16
    container_name: nest-products-pg-db
    restart: always
    ports:
      - '5433:5432' 
    environment:
      POSTGRES_USER: ${PRODUCTS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${PRODUCTS_POSTGRES_PASSWORD}
      POSTGRES_DB: ${PRODUCTS_POSTGRES_DB}
    volumes:
      - products-pg-data:/var/lib/postgresql/data
    networks:
      - ecommerce-app-microservice-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  orders-pg-db:
    image: postgres:16
    container_name: nest-orders-pg-db
    restart: always
    ports:
      - '5434:5432'
    environment:
      POSTGRES_USER: ${ORDERS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ORDERS_POSTGRES_PASSWORD}
      POSTGRES_DB: ${ORDERS_POSTGRES_DB}
    volumes:
      - orders-pg-data:/var/lib/postgresql/data
    networks:
      - ecommerce-app-microservice-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
  cart-mongo:
    image: mongo
    container_name: cart-mongo
    restart: always
    ports:
      - '27017:27017'
    volumes:
      - cart-mongo-data:/data/db
    networks:
      - ecommerce-app-microservice-network
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    restart: unless-stopped
    networks:
      - ecommerce-app-microservice-network
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - ecommerce-app-microservice-network
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  notifications-microservice:
    build:
      context: .
      dockerfile: ./notifications-microservice/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - ecommerce-app-microservice-network
    env_file:
      - ./notifications-microservice/.env
    volumes:
      - ./notifications-microservice:/usr/src/app/notifications-microservice
      - /usr/src/app/notifications-microservice/node_modules
      - libs-dist:/usr/src/app/libs/dist
      - libs-modules:/usr/src/app/libs/node_modules
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Notification Service Healthy')"]
      interval: 10s
      timeout: 5s
      retries: 5
  shipping-microservice:
    build:
      context: .
      dockerfile: ./shipping-microservice/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - ./shipping-microservice/.env
    networks:
      - ecommerce-app-microservice-network
    volumes:
      - ./shipping-microservice:/usr/src/app/shipping-microservice
      - /usr/src/app/shipping-microservice/node_modules
      - libs-dist:/usr/src/app/libs/dist
      - libs-modules:/usr/src/app/libs/node_modules
      - shipping-sqlite-data:/usr/src/app/shipping.db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Shipping Service Healthy')"]
      interval: 10s
      timeout: 5s
      retries: 5
  stock-microservice:
    build:
      context: .
      dockerfile: ./stock-microservice/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      products-microservice:
        condition: service_healthy
    env_file:
      - ./stock-microservice/.env
    networks:
      - ecommerce-app-microservice-network
    volumes:
      - ./stock-microservice:/usr/src/app/stock-microservice
      - /usr/src/app/stock-microservice/node_modules
      - libs-dist:/usr/src/app/libs/dist
      - libs-modules:/usr/src/app/libs/node_modules
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Stock Service Healthy')"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    ports:
      - '6379:6379'
    networks:
      - ecommerce-app-microservice-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - ecommerce-app-microservice-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    ports:
      - '3000:3000'
    networks:
      - ecommerce-app-microservice-network
    depends_on:
      users-microservice:
        condition: service_healthy
      products-microservice:
        condition: service_healthy
      auth-microservice:
        condition: service_healthy
      orders-microservice:
        condition: service_healthy
      cart-microservice:
        condition: service_healthy
      libs:
        condition: service_healthy
      kafka:
        condition: service_healthy
      notifications-microservice:
        condition: service_healthy
      shipping-microservice:
        condition: service_healthy
      stock-microservice:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3000"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./api-gateway:/usr/src/app/api-gateway
      - /usr/src/app/api-gateway/node_modules
      - libs-dist:/usr/src/app/libs/dist
      - libs-modules:/usr/src/app/libs/node_modules
    restart: unless-stopped

networks:
  ecommerce-app-microservice-network:
    driver: bridge

volumes:
  users-pg-data:
  products-pg-data:
  orders-pg-data:
  cart-mongo-data:
  pgadmin:
  shipping-sqlite-data:
  libs-dist:
  libs-modules:
