services:
  
  users-microservice:
    build:
      context: ./users-microservice
      dockerfile: Dockerfile
    networks:
      - ecommerce-app-microservice-network
    depends_on:
      users-pg-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3020"]
      interval: 10s
      timeout: 5s
      retries: 5
  products-microservice:
    build:
      context: ./products-microservice
      dockerfile: Dockerfile
    networks:
      - ecommerce-app-microservice-network
    depends_on:
      products-pg-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3022"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - ./products-microservice/.env
  
  orders-microservice:
    build:
      context: ./orders-microservice
      dockerfile: Dockerfile
    networks:
      - ecommerce-app-microservice-network
    depends_on:
      orders-pg-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3023"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - ./orders-microservice/.env

  auth-microservice:
    build:
      context: ./auth-microservice
      dockerfile: Dockerfile
    networks:
      - ecommerce-app-microservice-network
    depends_on:
      users-microservice:
        condition: service_healthy
      products-microservice:
        condition: service_healthy
      orders-microservice:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3021"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  users-pg-db:
    image: postgres:16
    container_name: nest-user-pg-db
    restart: always
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: ${USERS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${USERS_POSTGRES_PASSWORD}
      POSTGRES_DB: ${USERS_POSTGRES_DB}
    volumes:
      - users-pg-data:/var/lib/postgresql/data
    networks:
      - ecommerce-app-microservice-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  products-pg-db:
    image: postgres:16
    container_name: nest-products-pg-db
    restart: always
    ports:
      - '5433:5432' 
    environment:
      POSTGRES_USER: ${PRODUCTS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${PRODUCTS_POSTGRES_PASSWORD}
      POSTGRES_DB: ${PRODUCTS_POSTGRES_DB}
    volumes:
      - products-pg-data:/var/lib/postgresql/data
    networks:
      - ecommerce-app-microservice-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  orders-pg-db:
    image: postgres:16
    container_name: nest-orders-pg-db
    restart: always
    ports:
      - '5434:5432'
    environment:
      POSTGRES_USER: ${ORDERS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ORDERS_POSTGRES_PASSWORD}
      POSTGRES_DB: ${ORDERS_POSTGRES_DB}
    volumes:
      - orders-pg-data:/var/lib/postgresql/data
    networks:
      - ecommerce-app-microservice-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    restart: unless-stopped
    networks:
      - ecommerce-app-microservice-network
  
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    networks:
      - ecommerce-app-microservice-network
    depends_on:
      users-microservice:
        condition: service_healthy
      products-microservice:
        condition: service_healthy
      auth-microservice:
        condition: service_healthy
      orders-microservice:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3000"]
      interval: 10s
      timeout: 5s
      retries: 5


networks:
  ecommerce-app-microservice-network:
    driver: bridge

volumes:
  users-pg-data:
  products-pg-data:
  orders-pg-data:
  pgadmin:
